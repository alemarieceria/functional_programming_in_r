---
title: "Labs for UO's EDLD 653: Functional Programming for Educational Data Science Course"
subtitle: "[Course Website](https://fp-2022.netlify.app/)" 
format: html
execute: 
  warning: false
---

```{r}
#| echo: false
#| code-fold: true
#| code-summary: ""
```

```{r}
#| echo: false
#| code-fold: true
#| code-summary: "**`install_and_load_libraries()`** function to import data using `{pacman}` R package and to keep track dependencies using `{renv}` R package"
install_packages_and_load_libraries <- function(cran_packages = NULL, github_packages = NULL) {
  # Function to install a package if not already installed
  ensure_package_installed <- function(pkg) {
    if (!requireNamespace(pkg, quietly = TRUE)) {
      suppressMessages(suppressWarnings(install.packages(pkg)))
    }
  }
  
  # Ensure pacman and renv are installed
  ensure_package_installed("pacman")
  ensure_package_installed("renv")
  
  # Load pacman and renv
  suppressMessages(suppressWarnings(library(pacman, quietly = TRUE)))
  suppressMessages(suppressWarnings(library(renv, quietly = TRUE)))
  
  # Install and load CRAN packages if specified
  if (!is.null(cran_packages) && length(cran_packages) > 0) {
    suppressMessages(suppressWarnings(pacman::p_load(char = cran_packages, character.only = TRUE)))
  }
  
  # Install and load GitHub packages if specified
  if (!is.null(github_packages) && length(github_packages) > 0) {
    suppressMessages(suppressWarnings(pacman::p_install_gh(github_packages)))
  }
  
  # Snapshot the renv environment
  # suppressMessages(suppressWarnings(invisible(renv::snapshot())))
}

cran_packages <- c(
  # File management
  "fs", "here",
  # Dataset and data tidying
  "palmerpenguins", "tidyverse", "janitor",
  # Data visualization
  "scales"
)

# Execute function
install_packages_and_load_libraries(cran_packages)
```

::: panel-tabset

## 1

### Data Structures

```{r}
#| code-fold: true
#| code-summary: "Set Up - `m`"
set.seed(123) # Set random number generation

m <- lm(mpg ~ hp + cyl + drat, mtcars)
str(m)
```

```{r}
#| code-fold: true
#| code-summary: "Set Up - `l`"
l <- list(a = list(m = matrix(1:12, ncol = 3),
              	   v = 1:7),
          b = data.frame(student = 1:15,
                         score = rnorm(15, 100, 10)))
str(l)
```

#### From `m`

```{r}
#| code-fold: true
#| code-summary: "Extract the qr tolerance (`tol`)"
tol <- m$qr$tol
tol
```
  
```{r}
#| code-fold: true
#| code-summary: "Extract the term labels from the model"
terms <- attr(m$terms, "term.labels")
terms
```

#### From `l`

```{r}
#| code-fold: true
#| code-summary: "Use at least two different methods to extract `m`"
m1 <- l$a$m
m1

m2 <- l[["a"]]["m"]
m2
```

```{r}
#| code-fold: true
#| code-summary: "Extract the third column of `m`. Maintain the dimensions (matrix structure)"
m1_third_col <- matrix(m1[, 3])
m1_third_col
```

```{r}
#| code-fold: true
#| code-summary: "Extract the score for student 7 in the data frame"
student_7_score <- l$b$score[7]
student_7_score
```

```{r}
#| code-fold: true
#| code-summary: "Extract the score for student 7 in the data frame (Alternative version)"
l$b[7, ]
```

***

### Loops

`insurance_coverage.csv` file is corrupt, will use the penguins dataset instead

```{r}
#| code-fold: true
#| code-summary: "`penguins` dataset variable names"
names(penguins)
```

```{r}
#| code-fold: true
#| code-summary: "Split the data file by `species` and `sex`"
by_species_sex <- split(penguins, list(penguins$species, penguins$sex))
by_species_sex
```

```{r}
#| code-fold: true
#| code-summary: "Use a `for` loop to calculate the mean bill length (`bill_length_mm`) for each `species/sex` combination`"
mean_bill_length_for_loop <- vector("list", length(by_species_sex))

for(i in seq_along(by_species_sex)) {
  mean_bill_length_for_loop[i] <- round(mean(
    by_species_sex[[i]]$bill_length_mm,
    na.rm = TRUE
  ), 2)
}

mean_bill_length_for_loop
```

```{r}
#| code-fold: true
#| code-summary: "Replicate this calculation with `lapply`"
mean_bill_length_lapply <- lapply(by_species_sex, \(df) round(mean(df$bill_length_mm, na.rm = TRUE), 2))
mean_bill_length_lapply
```

```{r}
#| code-fold: true
#| code-summary: "Replicate this calculation with `sapply`"
mean_bill_length_sapply <- sapply(by_species_sex, \(df) round(mean(df$bill_length_mm, na.rm = TRUE), 2))
mean_bill_length_sapply
```

```{r}
#| code-fold: true
#| code-summary: "Replicate this calculation with `vapply`"
mean_bill_length_vapply <- vapply(by_species_sex, \(df) round(mean(df$bill_length_mm, na.rm = TRUE), 2), FUN.VALUE = double(1))
mean_bill_length_vapply
```

```{r}
#| code-fold: true
#| code-summary: "Produce separate plots showing the change in `bill_length_mm` from 2007 to 2009 for each `species/sex` combination (with a single loop). Set the `bill_length_mm` axis so the limits equal the overall minimum and maximum values for `bill_length_mm`"
#| fig-align: center
plots <- lapply(by_species_sex, \(df) {
  bill_length_range <- range(df$bill_length_mm)
  min_year <- min(df$year)
  max_year <- max(df$year)
  
  ggplot(df, aes(factor(year), bill_length_mm)) +
  geom_boxplot() +
  scale_y_continuous(limits = bill_length_range) +
  theme_minimal() +
  theme(
    plot.title = element_text(
      hjust = 0.5, 
      face = "bold", 
      size = 18
    )
  ) +
  labs(
    x = "Year",
    y = "Bill Length (mm)",
    title = str_to_sentence(paste(
      "Bill Length for a", 
      unique(penguins$sex),
      unique(penguins$species),
      "from",
      min_year,
      "to",
      max_year
    ))
  )
})

plots$Chinstrap.female
```

```{r}
#| code-fold: true
#| code-summary: "Use a `for` loop to save the plots to a folder on your computer"
dir_create(here("plots"))
file_names <- paste0(
  tolower(gsub("\\.", "_", names(by_species_sex))), "_bill_lengths.png"
)
file_names

file_paths <- here("plots", file_names)
file_paths

for(plot in seq_along(file_paths)) {
  ggsave(
    file_paths[plot],
    plots[[plot]],
    width = 20,
    height = 12,
    units = "in",
    dpi = 300
  )
}
```
:::